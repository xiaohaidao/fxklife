#ifndef CARLIFE_CHANNEL_CARLIFETYPE_H
#define CARLIFE_CHANNEL_CARLIFETYPE_H

#include <inttypes.h>

/********************************************************
DEFINE
*********************************************************/
#define DEFAULT_HEAD_LEN 12
#define DEFAULT_DATA_SIZE 10 * 1024

#define CMD_HEAD_LEN 8
#define CMD_DATA_SIZE 40 * 1024 // MSG_CMD_MEDIA_INFO<32k

#define VIDEO_HEAD_LEN 12
#define VIDEO_DATA_SIZE 600 * 1024 // normally VIDEO_DATA_SIZE<300X1024

#define MEDIA_HEAD_LEN 12
#define MEDIA_DATA_SIZE 100 * 1024

#define TTS_HEAD_LEN 12
#define TTS_DATA_SIZE 50 * 1024 // normally TTS_DATA_SIZE<10x1024

#define VR_HEAD_LEN 12
#define VR_DATA_SIZE 50 * 1024 // normally VR_DATA_SIZE<10x1024

#define CTRL_HEAD_LEN 8
#define CTRL_DATA_SIZE 10 * 1024

#define CHANNEL_NUMBER 7 // unknown 7

#define CMD_SOCKET_PORT_MD 7240
#define VIDEO_SOCKET_PORT_MD 8240
#define MEDIA_SOCKET_PORT_MD 9240
#define TTS_SOCKET_PORT_MD 9241
#define VR_SOCKET_PORT_MD 9242
#define TOUCH_SOCKET_PORT_MD 9340
#define UNKNOWN_SOCKET_PORT_MD 9440 // TODO Add

#define CMD_SOCKET_PORT_HU 7200
#define VIDEO_SOCKET_PORT_HU 8200
#define MEDIA_SOCKET_PORT_HU 9200
#define TTS_SOCKET_PORT_HU 9201
#define VR_SOCKET_PORT_HU 9202
#define TOUCH_SOCKET_PORT_HU 9300

/**********************************************************
ENUM
***********************************************************/
enum EChannelType {
  kCMD_CHANNEL = 1,
  kVIDEO_CHANNEL = 2,
  kMEDIA_CHANNEL = 3,
  kTTS_CHANNEL = 4,
  kVR_CHANNEL = 5,
  kCTRL_CHANNEL = 6,
};

enum EPackageHeadType {
  // default invailid head type
  MSG_DEFAULT_HEAD_TYPE = 0x00000000,
  //--------------------Command channel-------------------------
  // command channel relative
  //--interactive message for initialization
  MSG_CMD_HU_PROTOCOL_VERSION = 0x00018001,
  MSG_CMD_PROTOCOL_VERSION_MATCH_STATUS = 0x00010002,
  MSG_CMD_HU_INFO = 0x00018003,
  MSG_CMD_MD_INFO = 0x00010004,
  MSG_CMD_HU_BT_PAIR_INFO = 0x00018005,
  MSG_CMD_MD_BT_PAIR_INFO = 0x00010006,

  //--video relative
  MSG_CMD_VIDEO_ENCODER_INIT = 0x00018007,
  MSG_CMD_VIDEO_ENCODER_INIT_DONE = 0x00010008,
  MSG_CMD_VIDEO_ENCODER_START = 0x00018009,
  MSG_CMD_VIDEO_ENCODER_PAUSE = 0x0001800A,
  MSG_CMD_VIDEO_ENCODER_RESET = 0x0001800B,
  MSG_CMD_VIDEO_ENCODER_FRAME_RATE_CHANGE = 0x0001800C,
  MSG_CMD_VIDEO_ENCODER_FRAME_RATE_CHANGE_DONE = 0x0001000D,

  //--audio relative
  MSG_CMD_PAUSE_MEDIA = 0x0001800E,

  //--vehicle infromation
  MSG_CMD_CAR_VELOCITY = 0x0001800F,
  MSG_CMD_CAR_GPS = 0x00018010,
  MSG_CMD_CAR_GYROSCOPE = 0x00018011,
  MSG_CMD_CAR_ACCELERATION = 0x00018012,
  MSG_CMD_CAR_OIL = 0x00018013,

  //--phone status
  MSG_CMD_TELE_STATE_CHANGE_INCOMING = 0x00010014,
  MSG_CMD_TELE_STATE_CHANGE_OUTGOING = 0x00010015,
  MSG_CMD_TELE_STATE_CHANGE_IDLE = 0x00010016,
  MSG_CMD_TELE_STATE_CHANGE_INCALLING = 0x00010017,

  //--mobile device status
  MSG_CMD_SCREEN_ON = 0x00010018,
  MSG_CMD_SCREEN_OFF = 0x00010019,
  MSG_CMD_SCREEN_USERPRESENT = 0x0001001A,
  MSG_CMD_FOREGROUND = 0x0001001B,
  MSG_CMD_BACKGROUND = 0x0001001C,

  //--launch mode
  MSG_CMD_LAUNCH_MODE_NORMAL = 0x0001801D,
  MSG_CMD_LAUNCH_MODE_PHONE = 0x0001801E,
  MSG_CMD_LAUNCH_MODE_MAP = 0x0001801F,
  MSG_CMD_LAUNCH_MODE_MUSIC = 0x00018020,
  MSG_CMD_GO_TO_DESKTOP = 0x00010021,

  //--vr relative
  MSG_CMD_MIC_RECORD_WAKEUP_START = 0x00010022,
  MSG_CMD_MIC_RECORD_END = 0x00010023,
  MSG_CMD_MIC_RECORD_RECOG_START = 0x00010024,

  MSG_CMD_GO_TO_FOREGROUND = 0x00018025,
  MSG_CMD_MODULE_STATUS = 0x00010026,
  MSG_CMD_STATISTIC_INFO = 0x00018027,
  MSG_CMD_MODULE_CONTROL = 0x00018028,

  // navi info
  MSG_CMD_GEAR_INFO = 0x00010029,
  MSG_CMD_NAVI_NEXT_TURN_INFO = 0x00010030,
  MSG_CMD_CAR_DATA_SUBSCRIBE = 0x00010031,
  MSG_CMD_CAR_DATA_SUBSCRIBE_DONE = 0x00010032,
  MSG_CMD_CAR_DATA_SUBSCRIBE_START = 0x00010033,
  MSG_CMD_CAR_DATA_SUBSCRIBE_STOP = 0x00010034,

  // music relative
  MSG_CMD_MEDIA_INFO = 0x00010035,
  MSG_CMD_MEDIA_PROGRESS_BAR = 0x00010036,

  MSG_CMD_CONNECT_EXCEPTION = 0x00010037,
  MSG_CMD_REQUEST_GO_TO_FOREGROUND = 0x00010038,

  MSG_CMD_UI_ACTION_SOUND = 0x00010039,

  MSG_CMD_BT_HFP_REQUEST = 0x00010040,
  MSG_CMD_BT_HFP_INDICATION = 0x00018041,
  MSG_CMD_BT_HFP_CONNECTION = 0x00018042,

  MSG_CMD_CARLIFE_DATA_SUBSCRIBE = 0x00018043,
  MSG_CMD_CARLIFE_DATA_SUBSCRIBE_DONE = 0x00010044,
  MSG_CMD_CARLIFE_DATA_SUBSCRIBE_START = 0x00018045,
  MSG_CMD_CARLIFE_DATA_SUBSCRIBE_STOP = 0x00018046,
  MSG_CMD_NAVI_ASSITANTGUIDE_INFO = 0x00010047,
  MSG_CMD_HU_AUTHEN_REQUEST = 0x00018048,
  MSG_CMD_MD_AUTHEN_RESPONSE = 0x00010049,
  MSG_CMD_HU_AUTHEN_RESULT = 0x0001804A,
  MSG_CMD_MD_AUTHEN_RESULT = 0x0001004B,
  MSG_CMD_GO_TO_FOREGROUND_RESPONSE = 0x0001004C,
  MSG_CMD_START_BT_AUTOPAIR_REQUEST = 0x0001004D,
  MSG_CMD_BT_HFP_RESPONSE = 0x0001804E,
  MSG_CMD_BT_HFP_STATUS_REQUEST = 0x0001004F,
  MSG_CMD_BT_HFP_STATUS_RESPONSE = 0x00018050,

  MSG_CMD_MD_FEATURE_CONFIG_REQUEST = 0x00010051,
  MSG_CMD_HU_FEATURE_CONFIG_RESPONSE = 0x00018052,
  MSG_CMD_BT_START_IDENTIFY_REQ = 0x00018053,
  MSG_CMD_BT_IDENTIFY_RESULT_IND = 0x00010054,
  MSG_CMD_ERROR_CODE = 0x00018055,

  MSG_CMD_VIDEO_ENCODER_JPEG = 0x00018056,
  MSG_CMD_VIDEO_ENCODER_JPEG_ACK = 0x00010057,
  MSG_CMD_BT_HFP_CALL_STATUS_COVER = 0x00010058,
  MSG_CMD_MD_EXIT = 0x00010059,

  //------------------------Video channel--------------------------------
  // video channel relative
  MSG_VIDEO_DATA = 0x00020001,
  MSG_VIDEO_HEARTBEAT = 0x00020002,

  //------------------------Media channel-------------------------------
  // media channel relative
  MSG_MEDIA_INIT = 0x00030001,
  MSG_MEDIA_STOP = 0x00030002,
  MSG_MEDIA_PAUSE = 0x00030003,
  MSG_MEDIA_RESUME_PLAY = 0x00030004,
  MSG_MEDIA_SEEK_TO = 0x00030005,
  MSG_MEDIA_DATA = 0x00030006,

  //-------------------Navi TTS channel-----------------------------
  // tts channel relative
  MSG_TTS_INIT = 0x00040001,
  MSG_TTS_STOP = 0x00040002,
  MSG_TTS_DATA = 0x00040003,

  //-------------------VR channel----------------------
  // vr channel relative
  MSG_VR_MIC_DATA = 0x00058001,
  MSG_VR_INIT = 0x00050002,
  MSG_VR_DATA = 0x00050003,
  MSG_VR_STOP = 0x00050004,
  MSG_VR_STATUS = 0x00050005,    // Add
  MSG_VR_INTERRUPT = 0x00050006, // Add

  //-----------------Control channel--------------------
  // control channel relative
  MSG_TOUCH_ACTION = 0x00068001,
  MSG_TOUCH_ACTION_DOWN = 0x00068002,
  MSG_TOUCH_ACTION_UP = 0x00068003,
  MSG_TOUCH_ACTION_MOVE = 0x00068004,
  MSG_TOUCH_SINGLE_CLICK = 0x00068005,
  MSG_TOUCH_DOUBLE_CLICK = 0x00068006,
  MSG_TOUCH_LONG_PRESS = 0x00068007,
  MSG_TOUCH_CAR_HARD_KEY_CODE = 0x00068008,
  MSG_TOUCH_UI_ACTION_SOUND = 0x00060009,

  // hard key value
  KEYCODE_HOME = 0x00000001,
  KEYCODE_PHONE_CALL = 0x00000002,
  KEYCODE_PHONE_END = 0x00000003,
  KEYCODE_PHONE_END_MUTE = 0x00000004,
  KEYCODE_HFP = 0x00000005,
  KEYCODE_SELECTOR_NEXT = 0x00000006,
  KEYCODE_SELECTOR_PREVIOUS = 0x00000007,
  KEYCODE_SETTING = 0x00000008,
  KEYCODE_MEDIA = 0x00000009,
  KEYCODE_RADIO = 0x0000000A,
  KEYCODE_NAVI = 0x0000000B,
  KEYCODE_SRC = 0x0000000C,
  KEYCODE_MODE = 0x0000000D,
  KEYCODE_BACK = 0x0000000E,
  KEYCODE_SEEK_SUB = 0x0000000F,
  KEYCODE_SEEK_ADD = 0x00000010,
  KEYCODE_VOLUME_SUB = 0x00000011,
  KEYCODE_VOLUME_ADD = 0x00000012,
  KEYCODE_MUTE = 0x00000013,
  KEYCODE_OK = 0x00000014,
  KEYCODE_MOVE_LEFT = 0x00000015,
  KEYCODE_MOVE_RIGHT = 0x00000016,
  KEYCODE_MOVE_UP = 0x00000017,
  KEYCODE_MOVE_DOWN = 0x00000018,
  KEYCODE_MOVE_UP_LEFT = 0x00000019,
  KEYCODE_MOVE_UP_RIGHT = 0x0000001A,
  KEYCODE_MOVE_DOWN_LEFT = 0x0000001B,
  KEYCODE_MOVE_DOWN_RIGHT = 0x0000001C,
  KEYCODE_TEL = 0x0000001D,
  KEYCODE_MAIN = 0x0000001E,
};

// module control status module id enum
enum StatusModuleId {
  CARLIFE_PHONE_MODULE_ID = 1,
  CARLIFE_NAVI_MODULE_ID = 2,
  CARLIFE_MUSIC_MODULE_ID = 3,
  CARLIFE_VR_MODULE_ID = 4, /* 将RECORD关键字修改为VR */
  CARLIFE_CONNECT_MODULE_ID = 5,
  CARLIFE_MIC_MODULE_ID = 6,
  CARLIFE_MEDIAPCM_MODULE_ID = 7, /* 目前仅用于 iOS 设备 */
  CARLIFE_EDOG_MODULE_ID = 8,     /* (P/S: PB_VERSION	2.0 新增) */
  CARLIFE_CRUISE_ID = 9,          /* (P/S: PB_VERSION	2.0 新增) */
};

enum PhoneState {
  PHONE_STATUS_IDLE = 0,
  PHONE_STATUS_INCOMING = 1,
  PHONE_STATUS_OUTING = 2,
};

enum NaviState {
  NAVI_STATUS_IDLE = 0,
  NAVI_STATUS_RUNNING = 1,
};

enum MusicState {
  MUSIC_STATUS_IDLE = 0,
  MUSIC_STATUS_RUNNING = 1,
};

enum VRState {
  VR_STATUS_RECORD_IDLE = 0,
  VR_STATUS_RECORD_RUNNING = 1,
};

enum ConnectState {
  CONNECT_STATUS_ADB = 1,
  CONNECT_STATUS_AOA = 2,
  CONNECT_STATUS_NCM_ANDROID = 3,
  CONNECT_STATUS_NCM_IOS = 4,
  CONNECT_STATUS_WIFI = 5,
};

enum MicState {
  MIC_STATUS_USE_VEHICLE_MIC = 0,
  MIC_STATUS_USE_MOBILE_MIC = 1,
};

enum MediaPCMState {
  MEDIAPCM_STATUS_IDLE = 0,
  MEDIAPCM_STATUS_RUNNING = 1,
};

enum EDogState {
  EDOG_STATUS_IDLE = 0,
  EDOG_STATUS_RUNNING = 1,
};

enum CruiseState {
  CRUISE_STATUS_IDLE = 0,
  CRUISE_STATUS_RUNNING = 1,
};

// // Gear State
// enum GearState {
//   GEAR_NEUTRAL = 1,
//   GEAR_PARK = 2,
//   GEAR_DRIVE = 3,
//   GEAR_LOW = 4,
//   GEAR_REVERSE = 5,
// };

/*******************************************************
STRUCT
*******************************************************/
struct CmdMessageHeader {
  uint16_t length; // data size for PB
  uint16_t reserved;
  EPackageHeadType service_type;
  /* char *data */
};
static_assert(sizeof(CmdMessageHeader) == CMD_HEAD_LEN);

struct VideoMessageHeader {
  uint32_t length; // data size for PB
  uint32_t timestamp;

  // just MSG_VIDEO_DATA（0x00020001）or MSG_VIDEO_HEATBEAT（0x00020002）
  EPackageHeadType service_type;

  /* char *data */
};
static_assert(sizeof(VideoMessageHeader) == VIDEO_HEAD_LEN);

struct AudioMessageHeader {
  uint32_t length; // data size for PB
  uint32_t timestamp;

  // just initialize, suspend, resume for media,
  // initialize, data send or stop fro TTS
  EPackageHeadType service_type;

  /* char *data */
};
static_assert(sizeof(AudioMessageHeader) == MEDIA_HEAD_LEN);
static_assert(sizeof(AudioMessageHeader) == TTS_HEAD_LEN);

struct VoiceMessageHeader {
  uint32_t length; // data size for PB
  uint32_t timestamp;

  // just initialize, suspend, resume for media,
  // initialize, data send or stop fro TTS
  EPackageHeadType service_type;

  /* char *data // suggest 1024 */
};
static_assert(sizeof(VoiceMessageHeader) == VR_HEAD_LEN);

struct CtrlMessageHeader {
  uint16_t length; // data size for PB
  uint16_t reserved;
  EPackageHeadType service_type;
  /* char *data */
};
static_assert(sizeof(CtrlMessageHeader) == CTRL_HEAD_LEN);

#endif // CARLIFE_CHANNEL_CARLIFETYPE_H
